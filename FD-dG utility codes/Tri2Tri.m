function neighbours=Tri2Tri(p,t)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% DESCRIPTION: This code generates a neighbour table 'neighbours' for the
%              triangulation corresponding to linear [p,~,t] data
%
% INPUT : - p,t: point matrix (p) and triangulation matrix (t) from the
%                [p,e,t] structure generated by MATLAB for a linear mesh
%
%
% OUTPUT: - neighbours: a matrix containing 1's at a_{ij} if element i
%           neighbours with j, 0's if they are not neigbouring and -1 if the
%           neighbouring edge is on the outer boudnary
%
% AUTHOR:  Fredrik Bengzon, Mats G Larson
%          From the book "The Finite Element Method" by Larson and Bengzon
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    np=size(p,2); % Number of vertices in the mesh
    nt=size(t,2); % Number of triangles in the mesh

    n2e=sparse(np,nt); % Node to element map

    for i=1:nt
        n2e(t(1:3,i),i)=ones(3,1);
    end

    neighbours=-ones(nt,3);

    for i=1:nt

       % 1st edge, between t(2,i) and t(3,i)
        nb=intersect(find(n2e(t(2,i),:)),find(n2e(t(3,i),:)));
        nb=setdiff(nb,i);

        if isscalar(nb), neighbours(i,1)=nb(1); end

       % 2nd edge, between t(3,i) and t(1,i)
        nb=intersect(find(n2e(t(3,i),:)),find(n2e(t(1,i),:)));
        nb=setdiff(nb,i);

        if isscalar(nb), neighbours(i,2)=nb(1); end

       % 3rd edge, between t(1,i) and t(2,i)
        nb=intersect(find(n2e(t(1,i),:)),find(n2e(t(2,i),:)));
        nb=setdiff(nb,i);

          if isscalar(nb), neighbours(i,3)=nb(1); end

    
    end

end